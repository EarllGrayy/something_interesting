<!doctype html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Часы</title>
    <style>
        .clock-container {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        canvas {
            margin: 10px;
            border: 2px solid black;
            border-radius: 10%;
            background-color: black;
        }
    </style>
</head>
<body>
    <div class="clock-container">
        <div id="clocks">
            <!-- новые часики -->
        </div>
        <button id="addClock">Добавить</button>
        <select id="timezones">
            <option value="0">Лондон</option>
            <option value="3">Москва</option>
            <option value="5">Астана</option>
            <option value="8">Пекин</option>
            <option value="9">Нью-Йорк</option>
        </select>
    </div>
    

     <script>

 const timezoneNames = {
            0: 'Лондон',
            3: 'Москва',
            5: 'Астана',
            8: 'Пекин',
            9: 'Нью-Йорк'
        };

       function createClock(timezoneOffset) {
            const clockContainer = document.getElementById('clocks');
            const clock = document.createElement('div');
            const h3 = document.createElement('h3');
            h3.textContent = `${timezoneNames[timezoneOffset]}:`;
            const canvas = document.createElement('canvas');
            canvas.width = 500;
            canvas.height = 500;
            const removeButton = document.createElement('button');
            removeButton.textContent = 'Удалить';
            removeButton.addEventListener('click', function() {
                clockContainer.removeChild(clock);
            });
            clock.appendChild(h3);
            clock.appendChild(removeButton);
            clock.appendChild(canvas);
            clockContainer.appendChild(clock);
        
            
            function updateClock() {
                const ctx = canvas.getContext('2d');
                const now = new Date();
                const hours = (now.getUTCHours() + timezoneOffset) % 24;
                const minutes = now.getUTCMinutes();
                const seconds = now.getUTCSeconds();
                const clockRadius = 200;
                const clockX = canvas.width / 2;
                const clockY = canvas.height / 2;
                const angle = Math.PI * 2;
                
                // фон часов
                ctx.beginPath();
                ctx.arc(clockX, clockY, clockRadius, 0, angle);
                ctx.fillStyle = '#313e46';
                ctx.fill();
                ctx.lineWidth = 10;
                ctx.strokeStyle = '#313e46';
                ctx.stroke();
                ctx.closePath();
                
                //циферблат и секундная стрелка да ристочки
                ctx.fillStyle = 'white';
                ctx.font = '50px courier';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.lineWidth = 2;
                ctx.strokeStyle = 'white';
                
                const minuteMarkerRadius = clockRadius * 1.1;
                
                for (let i = 0; i < 60; i++) {
                    const angle = Math.PI / 30 * (i-15);
                    
                    if (i % 5 === 0) {
                        const x1 = clockX + Math.cos(angle) * (clockRadius * 0.8);
                        const y1 = clockY + Math.sin(angle) * (clockRadius * 0.8);
                        // когда стрелка указывает на какой-то час
                        const hour = i / 5 || 12; 
                        ctx.fillText(hour, x1, y1);
                    } else {
                        const x1 = clockX + Math.cos(angle) * (minuteMarkerRadius * 0.85);
                        const y1 = clockY + Math.sin(angle) * (minuteMarkerRadius * 0.85);
                        const x2 = clockX + Math.cos(angle) * (minuteMarkerRadius * 0.91);
                        const y2 = clockY + Math.sin(angle) * (minuteMarkerRadius * 0.91);
                        // и когда стрелка указывает не на какой-то час
                        ctx.beginPath();
                        ctx.moveTo(x1, y1);
                        ctx.lineTo(x2, y2);
                        ctx.stroke();
                        ctx.closePath();
                    }
                }
                
                // часовая стрелка
                ctx.save();
                ctx.translate(clockX, clockY);
                ctx.rotate((angle / 12) * (hours % 12 + minutes / 60));
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(0, -clockRadius * 0.5);
                ctx.lineWidth = 8;
                ctx.lineCap = 'round';
                ctx.strokeStyle = 'white';
                ctx.stroke();
                ctx.closePath();
                ctx.restore();
                
                // минутная стрелка
                ctx.save();
                ctx.translate(clockX, clockY);
                ctx.rotate((angle / 60) * (minutes + seconds / 60));
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(0, -clockRadius * 0.7);
                ctx.lineWidth = 6;
                ctx.lineCap = 'round';
                ctx.strokeStyle = 'white';
                ctx.stroke();
                ctx.closePath();
                ctx.restore();
                
                // секундреая стрелка
                ctx.save();
                ctx.translate(clockX, clockY);
                ctx.rotate((angle / 60) * seconds);
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(0, clockRadius);
                ctx.lineWidth = 2;
                ctx.lineCap = 'round';
                ctx.strokeStyle = 'red';
                ctx.stroke();
                ctx.closePath();
                ctx.restore();
                
                // вотетот вот кружок центре часов
                const centerRadius = 10; 
                ctx.beginPath();
                ctx.arc(clockX, clockY, centerRadius, 0, angle);
                ctx.fillStyle = 'white';
                ctx.fill();
                ctx.closePath();
            }
            
            // функция для анимации движения стрелок
            function tick() {
                updateClock();
                requestAnimationFrame(tick);
            }
            
            tick();
        }
        // собираем все вместе тут, чтобы все функции корректно работали
        document.getElementById('addClock').addEventListener('click', function() {
            const timezoneOffset = parseInt(document.getElementById('timezones').value);
            createClock(timezoneOffset);
        });
        
        // создаем часы при загрузке страницы
        createClock(0);
    </script>
</body>
</html>
