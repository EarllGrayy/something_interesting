<!doctype html>
<html lang="ru">

<head>
    <title>Динамическая таблица</title>
</head>
<style>
    *,
    html,
    body {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        background-color: #f5f5f5;
    }

    main {
        display: flex;
        flex-flow: column;
        gap: 16px;
        padding: 32px;
    }

    button {
        padding: 4px 8px;
    }

    .dataset {
        display: flex;
        gap: 16px;
        flex-flow: row;
        flex-wrap: wrap;
        width: 100%;
        align-items: flex-end;
    }

    .dataset__predefined,
    .dataset__form {
        display: flex;
        gap: 8px;
        flex-flow: column;
    }

    .dataset__form {
        flex-grow: 1;
    }

    .dataset__input-group {
        display: flex;
        gap: 8px;
        flex-flow: row;
    }

    .dataset__input-group input {
        flex-grow: 1;
    }

    .dynamic-table {
        width: 100%;
        border-collapse: collapse;
    }

    .dynamic-table th,
    .dynamic-table td {
        border: 1px solid #000;
    }

    .dynamic-table th {
        padding: 8px;
        cursor: pointer
    }

    .dynamic-table td {
        padding: 4px 8px;
    }

    .dynamic-table tbody tr:nth-child(odd) {
        background-color: #fff;
    }

    .dynamic-table tbody tr:hover {
        background-color: #ccc;
    }

    .pagination-wrapper {
        display: flex;
        justify-content: center;
        gap: 8px;
        margin-top: 16px;
    }

    .pagination-wrapper button {
        padding: 4px 8px;

    }
    #pagination-wrapper {
        display: flex;
    gap: 20px;
    align-items: center;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const smallDatasetButton = document.getElementById('dataset-small');
        const bigDatasetButton = document.getElementById('dataset-big');
        const loadDatasetButton = document.getElementById('load-dataset');
        const datasetInput = document.getElementById('dataset');
        const tableWrapper = document.getElementById('table-wrapper');
        const paginationWrapper = document.getElementById('pagination-wrapper');
        const filterInput = document.getElementById('filter-input');

        let currentSortColumn = null;
        let isAscending = true;
        let keys = [];
        let currentPage = 1;
        const rowsPerPage = 10;
        let currentData = [];

        smallDatasetButton.addEventListener('click', function () {
            datasetInput.value =
                'http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D';
        });

        bigDatasetButton.addEventListener('click', function () {
            datasetInput.value =
                'http://www.filltext.com/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D';
        });

        loadDatasetButton.addEventListener('click', function () {
            const datasetUrl = datasetInput.value;
            if (datasetUrl) {
                fetch(datasetUrl)
                    .then(response => response.json())
                    .then(data => {
                        currentData = data;
                        currentPage = 1; // Установка currentPage в 1
                        generateTable(data);
                    })
                    .catch(error => console.error('Error fetching data:', error));
            } else {
                console.error('Dataset URL is empty');
            }
        });

        function generateTable(data) {
            keys = Object.keys(data[0]);
            const table = document.createElement('table');
            table.classList.add('dynamic-table');
            const thead = document.createElement('thead');
            const headerRow = document.createElement('tr');
            keys.forEach(key => {
                const th = document.createElement('th');
                th.textContent = key;
                th.addEventListener('click', () => sortTable(key));
                headerRow.appendChild(th);
            });
            thead.appendChild(headerRow);
            table.appendChild(thead);

            // Generate table body
            const tbody = document.createElement('tbody');
            const startIndex = (currentPage - 1) * rowsPerPage;
            const endIndex = startIndex + rowsPerPage;
            data.slice(startIndex, endIndex).forEach(item => {
                const row = document.createElement('tr');
                keys.forEach(key => {
                    const td = document.createElement('td');
                    if (key === 'address') {
                        const address = item[key];
                        td.textContent = `${address.streetAddress}, ${address.city}, ${address.state}, ${address.zip}`;
                    } else {
                        td.textContent = item[key];
                    }
                    row.appendChild(td);
                });
                tbody.appendChild(row);
            });
            table.appendChild(tbody);
            tableWrapper.innerHTML = '';
            paginationWrapper.innerHTML = '';

            tableWrapper.appendChild(table);

            generatePagination(data.length);
        }

        function generatePagination(totalRows) {
            const totalPages = Math.ceil(totalRows / rowsPerPage);
            const prevButton = document.createElement('button');
            prevButton.textContent = 'Назад';
            prevButton.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    generateTable(currentData);
                }
            });

            const nextButton = document.createElement('button');
            nextButton.textContent = 'Вперёд';
            nextButton.addEventListener('click', () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    generateTable(currentData);
                }
            });

            const pageInfo = document.createElement('span');
            pageInfo.textContent = `Страница ${currentPage} из ${totalPages}`;

            paginationWrapper.appendChild(prevButton);
            paginationWrapper.appendChild(pageInfo);
            paginationWrapper.appendChild(nextButton);

            if (currentPage === 1) {
                prevButton.disabled = true;
            }

            if (currentPage === totalPages) {
                nextButton.disabled = true;
            }
        }

        function sortTable(column) {
            if (currentSortColumn === column) {
                isAscending = !isAscending;
            } else {
                currentSortColumn = column;
                isAscending = true;
            }

            if (column === 'id') {
                currentData.sort((a, b) => {
                    const idA = parseInt(a[column]);
                    const idB = parseInt(b[column]);
                    if (isAscending) {
                        return idA - idB;
                    } else {
                        return idB - idA;
                    }
                });
            } else if (column === 'address') {
                currentData.sort((a, b) => {
                    const addressA = `${a[column].streetAddress}, ${a[column].city}, ${a[column].state}, ${a[column].zip}`;
                    const addressB = `${b[column].streetAddress}, ${b[column].city}, ${b[column].state}, ${b[column].zip}`;
                    if (isAscending) {
                        return addressA.localeCompare(addressB);
                    } else {
                        return addressB.localeCompare(addressA);
                    }
                });
            } else {
                currentData.sort((a, b) => {
                    const cellA = column === 'id' ? parseInt(a[column]) : a[column];
                    const cellB = column === 'id' ? parseInt(b[column]) : b[column];
                    if (isAscending) {
                        return cellA.localeCompare(cellB);
                    } else {
                        return cellB.localeCompare(cellA);
                    }
                });
            }
            generateTable(currentData);
        }

        filterInput.addEventListener('input', function () {
            const filterValue = filterInput.value.trim().toLowerCase();
            if (filterValue === '') {
                generateTable(currentData);
                return;
            }
            const filteredData = currentData.filter(item => {
                return keys.some(key => {
                    if (key === 'address') {
                        const address = item[key];
                        const fullAddress = `${address.streetAddress}, ${address.city}, ${address.state}, ${address.zip}`;
                        return fullAddress.toLowerCase().includes(filterValue);
                    } else {
                        return item[key].toString().toLowerCase().includes(filterValue);
                    }
                });
            });
            if (filteredData.length === 0) {
                tableWrapper.innerHTML = '<p>Ничего не нашли</p>';
                paginationWrapper.innerHTML = '';
            } else {
                generateTable(filteredData);
            }
        });

    });
</script>

<body>
    <main>
        <h1>Динамическая таблица</h1>
        <div class="dataset">
            <div class="dataset__predefined">
                <button id="dataset-small">Малый набор</button>
                <button id="dataset-big">Большой набор</button>
            </div>
            <div class="dataset__form">
                <div class="dataset__input-group">
                    <label for="dataset">Набор данных:</label>
                    <input type="text" id="dataset" placeholder="URL набора данных" />
                </div>
                <button id="load-dataset">Загрузить</button>
            </div>
            <div class="dataset__form">
                <div class="dataset__input-group">
                    <label for="filter-input">Фильтр:</label>
                    <input type="text" id="filter-input" placeholder="Поиск..." />
                </div>
            </div>
        </div>
        <div id="table-wrapper">
            <!-- Ваша таблица должна генерироваться тут -->
        </div>
        <div id="pagination-wrapper">
            <!-- Пагинация -->
        </div>
    </main>
</body>

</html>
